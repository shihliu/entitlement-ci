- defaults:
    name: virt-who-provision
    description: |
        Managed by Jenkins Job Builder. Do not edit via web.
    concurrent: true
    scm:
        - git:
            url: 'https://github.com/shihliu/entitlement-ci'
            branches:
                - origin/master
            basedir: entitlement-ci
    wrappers:
        - default-virt-who-wrappers

- defaults:
    name: virt-who-runtest
    description: |
        Managed by Jenkins Job Builder. Do not edit via web.
    concurrent: true
    scm:
        - git:
            url: 'https://github.com/shihliu/entitlement-ci'
            branches:
                - origin/master
            basedir: entitlement-ci
    wrappers:
        - default-virt-who-wrappers

- wrapper:
    name: default-virt-who-wrappers
    wrappers:
        - ansicolor
        - workspace-cleanup
        - timestamps

- publisher:
    name: default-virt-who-runtest-publishers
    publishers:
    - xunit:
        thresholdmode: number
        thresholds:
        - failed:
            unstable: 0
            unstablenew: 0
            failure: 0
            failurenew: 0
        - skipped:
            unstable: 0
            unstablenew: 0
            failure: 0
            failurenew: 0
        types:
        - junit:
            pattern: '*.xml'
            deleteoutput: false

- publisher:
    name: default-virt-who-publishers
    publishers:
    - email-ext:
        recipients: shihliu@redhat.com
        reply-to: shihliu@redhat.com
        content-type: default
        subject: '[Entitlement-CI]($SERVER_TYPE) $PROJECT_NAME on $VIRTWHO_SRC_ORIGINAL -
          $BUILD_STATUS!'
        body: |-
          [$SERVER_TYPE] $PROJECT_NAME on $RHEL_COMPOSE $REMOTE_HOSTNAME $VIRTWHO_SRC_ORIGINAL- Build # $BUILD_NUMBER - $BUILD_STATUS:

          Runtime Info As Follows:

          Test Packages
          $VIRTWHO_VERSION
          $RHSM
          $PYTHON_RHSM

          export RHEL_COMPOSE=$RHEL_COMPOSE
          export REMOTE_IP=$REMOTE_IP
          export REMOTE_HOSTNAME=$REMOTE_HOSTNAME
          export VIRTWHO_SRC=$VIRTWHO_SRC_ORIGINAL
          export SERVER_TYPE=$SERVER_TYPE
          export SERVER_IP=$SERVER_IP
          export SERVER_HOSTNAME=$SERVER_HOSTNAME
          export SERVER_COMPOSE=$SERVER_COMPOSE

          Details:

          Check console output at $BUILD_URL
          Check text log at ${BUILD_URL}consoleText/
          Check report at ${BUILD_URL}testReport/
        attach-build-log: false
        always: true
        send-to:
        - requester
        - recipients

- job-template:
    name: 'virt-who-esx-provision'
    defaults: virt-who-provision
    node: docker-rhel
    builders:
        - shell: |
            #!/bin/bash
            echo "*********************************setup env*********************************"
            #setup environment here to run alone, change back when finished
            #export SERVER_COMPOSE=ohsnap-satellite/satellite
            #export SERVER_IP=10.73.131.113
            #export SERVER_HOSTNAME=satellite62-ohsnap.redhat.com
            #export SERVER_TYPE=SATELLITE
            #export RHEL_COMPOSE_2=RHEL-6.8-20160414.0
            #export RHEL_COMPOSE=release
            #export VIRTWHO_SRC=rhel6.9/rhel6.8/rhel7.3
            echo "*********************************setup env*********************************"
            #Get RHEL-6.9
            #RHEL_COMPOSE_SIMPLE=${{RHEL_COMPOSE:0:8}}
            #RHEL_COMPOSE_RESULT=${{RHEL_COMPOSE_SIMPLE//./}}
            #Get RHEL-6.8
            #RHEL_COMPOSE_2_SIMPLE=${{RHEL_COMPOSE_2:0:8}}
            #RHEL_COMPOSE_2_RESULT=${{RHEL_COMPOSE_2_SIMPLE//./}}
            #echo "before test,RHEL_COMPOSE_RESULT is "$RHEL_COMPOSE_RESULT
            echo "before test,RHEL_COMPOSE_EXIST" is $RHEL_COMPOSE_EXIST
            echo "before test,VIRTWHO_SRC is " $VIRTWHO_SRC

            if [ "$RHEL_COMPOSE"x = "release"x ]
            then
                if [ "$RHEL_COMPOSE_EXIST"x = ""x ] && [ "$VIRTWHO_SRC"x = ""x ] 
                then 
                    CONTAINTERNAME="esx-rhel6.9-sattool.redhat.com"
                    IMAGENAME="rhel6.9"
                    export VIRTWHO_SRC="no"
                else
                    CONTAINTERNAME="esx-"$VIRTWHO_SRC".redhat.com"
                    echo "container name is "$CONTAINTERNAME
                    IMAGENAME=`echo $VIRTWHO_SRC | cut -d - -f 1`
                    echo "image name is" $IMAGENAME 
                    #thisString= $VIRTWHO_SRC
                    #searchString1="rhel6.9"
                    #searchString2="rhel6.8"
                    #searchString3="rhel7.3"
                    #case $thisString in
                    #    *"$searchString1"*) 
                    #        IMAGENAME=$searchString1 
                    #        echo "image name is" $IMAGENAME;;
                    #    *"$searchString2"*) 
                    #        IMAGENAME=$searchString2 
                    #        echo "image name is" $IMAGENAME;;
                    #    *)
                    #        IMAGENAME=$searchString3
                    #        echo "image name is" $IMAGENAME;;
                    #esac
                fi
                echo "After provision, CONTAINTERNAME is "$CONTAINTERNAME
                echo "After provision, IMAGENAME is "$IMAGENAME
                echo "After provision, RHEL_COMPOSE_EXIST" is $RHEL_COMPOSE_EXIST
                echo "After provision, VIRTWHO_SRC is "$VIRTWHO_SRC
                $WORKSPACE/entitlement-ci/provision/host_provision.sh  --containername=$CONTAINTERNAME --imagename=$IMAGENAME
            else
                $WORKSPACE/entitlement-ci/provision/host_provision.sh  --containername=$CONTAINTERNAME
            fi
            cat $WORKSPACE/RESOURCES.txt
            # Provision Test Resources
            echo "********************************runtime env********************************"
            env | grep -E '(SERVER_TYPE|SERVER_COMPOSE|VIRTWHO_SRC|SERVER_IP|SERVER_HOSTNAME|RHEL_COMPOSE|RHEL_COMPOSE_2|RHEL_COMPOSE_EXIST|RHEL_COMPOSE_2_EXIST)' | sort | xargs -i -d "\n" echo "export" {{}}
            env | grep -E '(SERVER_TYPE|SERVER_COMPOSE|VIRTWHO_SRC|SERVER_IP|SERVER_HOSTNAME|RHEL_COMPOSE|RHEL_COMPOSE_2|RHEL_COMPOSE_EXIST|RHEL_COMPOSE_2_EXIST)' >> $WORKSPACE/RESOURCES.txt
            echo "********************************runtime env********************************"
        - inject:
            properties-file: $WORKSPACE/RESOURCES.txt
    publishers:
      - archive:
          artifacts: '*.txt, *.json'
          allow-empty: 'true'
      - trigger-parameterized-builds:
        - project: virt-who-esx-runtest
          current-parameters: false
          condition: SUCCESS
          property-file: $WORKSPACE/RESOURCES.txt
          fail-on-missing: true

- job-template:
    name: virt-who-esx-runtest
    defaults: virt-who-runtest
    node: 'rhel-slave'
    builders:
    - copyartifact:
        project: virt-who-esx-provision
        filter: '*.txt, *.json'
        target: $WORKSPACE
    - shell: |
        #!/bin/bash
        echo "Jenkins machine info we are running on"
        ifconfig
        echo "Pinging Test Resources"
        cat $WORKSPACE/RESOURCES.txt
        echo REMOTE_IP=$REMOTE_IP
        echo "*********************************setup env*********************************"
        #setup environment here to run alone, change back when finished
        #export RHEL_COMPOSE=
        #export REMOTE_IP=
        #export SERVER_IP=
        #export SERVER_TYPE=
        #export SERVER_HOSTNAME=
        echo "*********************************setup env*********************************"
        pushd $WORKSPACE/entitlement-ci/testcases/virt_who_polarion/
        nosetests virtwho_esx_setup.py --with-xunit --xunit-file=$WORKSPACE/nosetests.xml
        popd

        #pushd $WORKSPACE/entitlement-ci/testcases/virt_who_polarion/satellite/esx/
        #nosetests *.py --with-xunit --xunit-file=$WORKSPACE/nosetests.xml
        #popd

        echo "************************check trigger condition of another esx*****************" 
        if [ "$RHEL_COMPOSE_EXIST"x = ""x ]
        then 
          if [ "$VIRTWHO_SRC"x = "no"x ] 
          then
             #run esx-rhel69-sattool.redhat.com
             export VIRTWHO_SRC_ORIGINAL=rhel6.9-sattool
             export VIRTWHO_SRC=rhel6.8-sattool
             echo VIRTWHO_SRC=rhel6.8-sattool>>$WORKSPACE/ESXNEWRUN.txt
          elif [ "$VIRTWHO_SRC"x = "rhel6.8-sattool"x ]
          then
             export VIRTWHO_SRC_ORIGINAL=rhel6.8-sattool
             export VIRTWHO_SRC=rhel7.3-sattool
             echo VIRTWHO_SRC=rhel7.3-sattool>>$WORKSPACE/ESXNEWRUN.txt
          elif [ "$VIRTWHO_SRC"x = "rhel7.3-sattool"x ]
          then
             export VIRTWHO_SRC_ORIGINAL=rhel7.3-sattool
             export VIRTWHO_SRC=rhel6.9-original
             echo VIRTWHO_SRC=rhel6.9-original>>$WORKSPACE/ESXNEWRUN.txt         
          elif [ "$VIRTWHO_SRC"x = "rhel6.9-original"x ]
          then
             export VIRTWHO_SRC_ORIGINAL=rhel6.9-original
             export VIRTWHO_SRC=rhel6.8-original
             echo VIRTWHO_SRC=rhel6.8-original>>$WORKSPACE/ESXNEWRUN.txt   
          else
             # esx-rhel73-original.redhat.com
             export VIRTWHO_SRC_ORIGINAL=rhel6.8-original
             export VIRTWHO_SRC=rhel7.3-original
             echo VIRTWHO_SRC=rhel7.3-original>>$WORKSPACE/ESXNEWRUN.txt 
             export RHEL_COMPOSE_EXIST=True
             echo RHEL_COMPOSE_EXIST=True>>$WORKSPACE/ESXNEWRUN.txt
          fi
        else
          export VIRTWHO_SRC_ORIGINAL=rhel7.3-original
          rm -rf $WORKSPACE/ESXNEWRUN.txt
        fi 
        echo "VIRTWHO_SRC is"$VIRTWHO_SRC
        echo "RHEL_COMPOSE_EXIST is "$RHEL_COMPOSE_EXIST
        echo "********************************runtime env********************************"
        env | grep -E '(REMOTE_IP|REMOTE_HOSTNAME|SERVER_TYPE|SERVER_COMPOSE|VIRTWHO_SRC|SERVER_IP|SERVER_HOSTNAME|RHEL_COMPOSE|RHEL_COMPOSE_2|RHEL_COMPOSE_EXIST)' | sort | xargs -i -d "\n" echo {{}} | tee -a $WORKSPACE/RUNTIME_INFO.txt
        env | grep -E '(REMOTE_IP|REMOTE_HOSTNAME|SERVER_TYPE|SERVER_COMPOSE|VIRTWHO_SRC|SERVER_IP|SERVER_HOSTNAME|RHEL_COMPOSE|RHEL_COMPOSE_2|RHEL_COMPOSE_EXIST)' | sort | xargs -i -d "\n" echo "export" {{}}
        env | grep -E '(REMOTE_IP|REMOTE_HOSTNAME|SERVER_TYPE|SERVER_COMPOSE|VIRTWHO_SRC|SERVER_IP|SERVER_HOSTNAME|RHEL_COMPOSE|RHEL_COMPOSE_2|RHEL_COMPOSE_EXIST)' >> $WORKSPACE/RESOURCES.txt
        echo "********************************runtime env********************************"
    - inject:
        properties-file: $WORKSPACE/RUNTIME_INFO.txt
    - inject:
        properties-file: $WORKSPACE/RESOURCES.txt
    - inject:
        properties-file: $WORKSPACE/ESXNEWRUN.txt
    publishers:
    - archive:
        artifacts: '**/**'
        allow-empty: 'true'
    - default-virt-who-runtest-publishers
    - default-virt-who-publishers
    - trigger-parameterized-builds:
      - project: virt-who-esx-provision
        property-file: $WORKSPACE/RESOURCES.txt,$WORKSPACE/ESXNEWRUN.txt
        fail-on-missing: true
        current-parameters: false
        #condition: ALWAYS
          
- job-group:
    name: virt-who-esx-provision-runtest
    jobs:
    - virt-who-esx-provision
    - virt-who-esx-runtest
- project:
    name: virt-who-esx-jobs
    project: virt-who-esx
    project_defaults: entitlement-ci/config/project_defaults
    topology_path: entitlement-ci/config
    topology: bkr_build_single_provision_no_hvm
    ssh_keyfile: entitlement-ci/config/keys/ent-key
    beaker_keyfile: entitlement-ci/config/keys/beaker-key
    tests_path: entitlement-ci/tests
    testparams: echo "I am a test parameter"
    jobs:
    - virt-who-esx-provision-runtest
    polarion_template: virt-who for esx auto template
