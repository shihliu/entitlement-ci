- job-template:
    name: 'ci-{project}-{topology}-1-provision'
    defaults: ci-workflow-provision
    node: master
    parameters:
        - choice:
            name: SITE
            choices:
              - qeos
              - os1
            description: |
              Site where to provision resources
    builders:
        - shell: |
            #!/bin/bash

            export JSLAVENAME={jslavename}
            # Provision Jenkins Slave
            if [ "$JSLAVENAME" != "master" ]
            then
                $WORKSPACE/ci-ops-central/bootstrap/provision_jslave.sh --site=$SITE --project_defaults={project_defaults} \
                --topology=ci-ops-central/project/config/aio_jslave --ssh_keyfile={ssh_keyfile} \
                --jslavename={jslavename} --jslaveflavor={jslaveflavor} --jslaveimage={jslaveimage} \
                --jslave_execs={jslave_execs} --jslavecreate --resources_file={jslavename}.json

                TR_STATUS=$?
                if [ "$TR_STATUS" != 0 ]; then echo "ERROR: Provisioning\nSTATUS: $TR_STATUS"; exit 1; fi
            fi

            # Provision Test Resources
            $WORKSPACE/ci-ops-central/bootstrap/provision_resources.sh --site=$SITE --project_defaults={project_defaults} \
            --topology={topology_path}/{topology} --ssh_keyfile={ssh_keyfile} --name={project}

            TR_STATUS=$?

            files=$(ls $WORKSPACE/*.slave 2>/dev/null)
            if [ -e "$files" ]
            then
                cat $WORKSPACE/*.slave >> $WORKSPACE/RESOURCES.txt
            fi

            if [ "$TR_STATUS" != 0 ]; then echo "ERROR: Provisioning\nSTATUS: $TR_STATUS"; exit 1; fi


        - inject:
            properties-file: $WORKSPACE/RESOURCES.txt

    publishers:
      - archive:
          artifacts: '*.txt, *.json'
          allow-empty: 'true'
      - trigger-parameterized-builds:
          - project: 'ci-{project}-{topology}-2-runtest'
            current-parameters: true
            condition: 'SUCCESS'
            property-file: $WORKSPACE/RESOURCES.txt
            fail-on-missing: true
          - project: 'ci-{project}-{topology}-3-teardown'
            current-parameters: true
            condition: 'UNSTABLE_OR_WORSE'
            property-file: $WORKSPACE/RESOURCES.txt
            fail-on-missing: true
      - default-ci-workflow-publishers


- job-template:
    name: 'ci-{project}-{topology}-2-runtest'
    defaults: ci-workflow-runtest
    node: '{jslavename}'
    builders:
        - copyartifact:
            project: 'ci-{project}-{topology}-1-provision'
            filter: '*.txt, *.json'
            target: $WORKSPACE

        - shell: |
            #!/bin/bash

            export TOPOLOGY={topology}
            {testparams}

            echo "TOPOLOGY: {topology}"

            echo "Ping Jenkins Slave"
            ping -c 10 $JSLAVEIP

            echo "Jenkins machine info we are running on"
            ifconfig

            echo "Pinging Test Resources"
            echo $EXISTING_NODES | xargs -i -d , ping -c 15 {{}}
            cat $WORKSPACE/RESOURCES.txt
            
            export REMOTE_IP=$EXISTING_NODES
            export REMOTE_USER=root
            export REMOTE_PASSWD=redhat
            export RUN_SERVER=sam
            export SAM_IP=10.66.129.134
            export SAM_HOSTNAME=samserv.redhat.com
            
            pushd $WORKSPACE/entitlement-ci/testcases/rhsm/rhsm_level_1/
            nosetests tc_ID115120_autosubscribe.py --with-xunit --xunit-file=$WORKSPACE/nosetests.xml
            popd

    publishers:
      - archive:
          artifacts: '**/**'
          allow-empty: 'true'
      - default-ci-workflow-runtest-publishers
      - trigger-parameterized-builds:
          - project: 'ci-{project}-{topology}-3-teardown'
            current-parameters: true
      - default-ci-workflow-publishers

- job-template:
    name: 'ci-{project}-{topology}-3-teardown'
    defaults: ci-workflow-provision
    node: master
    builders:
        - shell: |
#here I do not want to teardown anything
#            #!/bin/bash
#
#            export JSLAVETEARDOWN={jslaveteardown}
#            # Teardown Jenkins Slave
#            $WORKSPACE/ci-ops-central/bootstrap/teardown_resources.sh --site=$SITE --project_defaults={project_defaults} \
#            --topology={topology_path}/{topology} --name=$LABEL
#
#            TR_STATUS=$?
#            if [ "$TR_STATUS" != 0 ]; then echo "ERROR: Teardown\nSTATUS: $TR_STATUS"; exit 1; fi
#
#            if [ "$JSLAVETEARDOWN" == "True" ]
#            then
#              $WORKSPACE/ci-ops-central/bootstrap/teardown_jslave.sh --site=$SITE --project_defaults={project_defaults} \
#              --topology=ci-ops-central/project/config/aio_jslave --jslavename=$JSLAVENAME \
#              --jslaveusername={jslaveusername} --jslavepassword={jslavepassword} --jslaveip=$JSLAVEIP --jslaveteardown
#
#              TR_STATUS=$?
#              if [ "$TR_STATUS" != 0 ]; then echo "ERROR: Teardown\nSTATUS: $TR_STATUS"; exit 1; fi
#            fi

- job-group:
    name: ci-workflow-provision-runtest-teardown
    jobs:
      - 'ci-{project}-{topology}-1-provision'
      - 'ci-{project}-{topology}-2-runtest'
      - 'ci-{project}-{topology}-3-teardown'

- project:
    name: entitlement-ci-workflow-jobs
    project: entitlement-ci
    project_defaults: entitlement-ci/config/project_defaults
    topology_path: entitlement-ci/config
    topology: aio_RHEL6-5
    ssh_keyfile: entitlement-ci/config/keys/ent-key
    tests_path: entitlement-ci/tests
    testparams: echo "I am a test parameter"
    jobs:
     - ci-workflow-provision-runtest-teardown
    jslavename: jslave-entitlement-ci-slave
    jslave_execs: 10
    jslaveimage: rhel-6.5_jeos
    jslaveflavor: m1.large
    jslaveusername: root
    jslavepassword: redhat
    jslaveteardown: True