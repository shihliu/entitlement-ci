- job-template:
    name: 'virt-who-stage-esx-provision'
    defaults: virt-who-provision
    node: '{jmastername}'
    builders:
        - shell: |
            #!/bin/bash
            echo "*********************************setup env*********************************"
            #setup environment here to run alone, change back when finished
            #export RHEL_COMPOSE=
            export SERVER_TYPE=STAGE
            echo "*********************************setup env*********************************"
            kinit -k -t $KEYTAB $PRINCIPAL
            export JSLAVENAME={jslavename}
            # Provision Jenkins Slave
            if [ "$JSLAVENAME" != "{jmastername}" ]
            then
                $WORKSPACE/ci-ops-central/bootstrap/provision_jslave.sh --jenkins_master_username=sgao --jenkins_master_password=0bdd1e1626c4701fc0023fa87474459d --site=$SITE --project_defaults={project_defaults} \
                --topology=ci-ops-central/project/config/aio_jslave --ssh_keyfile={ssh_keyfile} \
                --jslavename={jslavename} --jslaveflavor={jslaveflavor} --jslaveimage={jslaveimage} \
                --jslave_execs={jslave_execs} --jslavecreate --resources_file={jslavename}.json
                TR_STATUS=$?
                if [ "$TR_STATUS" != 0 ]; then echo "ERROR: Provisioning\nSTATUS: $TR_STATUS"; exit 1; fi
            fi
            # Provision Test Resources Machine
            sleep 90
            chmod 777 $WORKSPACE/entitlement-ci/utils/tools/extend_beaker_waiting.sh; $WORKSPACE/entitlement-ci/utils/tools/extend_beaker_waiting.sh
            if [ "$RHEL_COMPOSE" != "" ]
            then
                sed -i "s/url_compose/$RHEL_COMPOSE/" $WORKSPACE/entitlement-ci/config/{topology}.json
                chmod 777 $WORKSPACE/entitlement-ci/utils/tools/check_beaker_distro_ready.sh
                $WORKSPACE/entitlement-ci/utils/tools/check_beaker_distro_ready.sh $RHEL_COMPOSE
                $WORKSPACE/ci-ops-central/bootstrap/provision_resources.sh --site=$SITE --project_defaults={project_defaults} \
                --topology={topology_path}/{topology} --ssh_keyfile={beaker_keyfile} --name={project}
            else
                echo "ERROR: RHEL_COMPOSE not provided\nSTATUS: $TR_STATUS"; exit 1;
            fi
            TR_STATUS=$?
            files=$(ls $WORKSPACE/*.slave 2>/dev/null)
            if [ -e "$files" ]
            then
                cat $WORKSPACE/*.slave >> $WORKSPACE/RESOURCES.txt
            fi
            if [ "$TR_STATUS" != 0 ]; then echo "ERROR: Provisioning\nSTATUS: $TR_STATUS"; echo workaround; fi
            echo "********************************runtime env********************************"
            env | grep -E '(RHEL_COMPOSE|SERVER_TYPE)' | sort | xargs -i -d "\n" echo "export" {{}}
            env | grep -E '(RHEL_COMPOSE|SERVER_TYPE)' >> $WORKSPACE/RESOURCES.txt
            echo "********************************runtime env********************************"
        - inject:
            properties-file: $WORKSPACE/RESOURCES.txt
    publishers:
      - archive:
          artifacts: '*.txt, *.json'
          allow-empty: 'true'
      - trigger-parameterized-builds:
          - project: 'virt-who-stage-esx-runtest'
            current-parameters: true
            condition: 'SUCCESS'
            property-file: $WORKSPACE/RESOURCES.txt
            fail-on-missing: true

- job-template:
    name: 'virt-who-stage-esx-runtest'
    defaults: virt-who-runtest
    node: '{jslavename}'
    builders:
        - copyartifact:
            project: 'virt-who-stage-esx-provision'
            filter: '*.txt, *.json'
            target: $WORKSPACE
        - shell: |
            #!/bin/bash
            export TOPOLOGY={topology}
            {testparams}
            echo "TOPOLOGY: {topology}"
            echo "Ping Jenkins Slave"
            ping -c 10 $JSLAVEIP
            echo "Jenkins machine info we are running on"
            ifconfig
            echo "Pinging Test Resources"
            echo $EXISTING_NODES | xargs -i -d , ping -c 15 {{}}
            cat $WORKSPACE/RESOURCES.txt

            EXISTING_NODES_1=`echo $EXISTING_NODES | cut -d ',' -f 1`
            EXISTING_NODES_2=`echo $EXISTING_NODES | cut -d ',' -f 2`
            export REMOTE_IP=$EXISTING_NODES_1
            export REMOTE_IP_2=$EXISTING_NODES_2
            echo "*********************************setup env*********************************"
            #setup environment here to run alone, change back when finished
            #export REMOTE_IP=
            #export REMOTE_IP_2=
            #export SERVER_TYPE=
            echo "*********************************setup env*********************************"

            pushd $WORKSPACE/entitlement-ci/testcases/virt_who_polarion/
            nosetests virtwho_esx_setup.py --with-xunit --xunit-file=$WORKSPACE/nosetests.xml
            popd

            pushd $WORKSPACE/entitlement-ci/testcases/virt_who_polarion/esx/
            nosetests *.py --with-xunit --xunit-file=$WORKSPACE/nosetests.xml
            popd

            pushd $WORKSPACE/entitlement-ci/utils/xmlparser/
            export PYTHONPATH=$WORKSPACE/entitlement-ci
            python polarion_name_to_id.py $WORKSPACE/nosetests.xml $WORKSPACE/POLARION.txt
            export RHEL_COMPOSE_FOR_POLARION=`echo $RHEL_COMPOSE | sed "s/\./_/g"`
            popd

            echo "********************************runtime env********************************"
            env | grep -E '(REMOTE_IP|RHEL_COMPOSE|SERVER_TYPE|VIRTWHO_VERSION|RHSM|RHSM_GUI|RHSM_FIRSTBOOT|PYTHON_RHSM)' | sort | xargs -i -d "\n" echo {{}} | tee -a $WORKSPACE/RUNTIME_INFO.txt
            echo "********************************runtime env********************************"
        - inject:
            properties-file: $WORKSPACE/RUNTIME_INFO.txt
    publishers:
      - archive:
          artifacts: '**/**'
          allow-empty: 'true'
      - default-virt-who-runtest-publishers
      - default-virt-who-double-publishers
      - default-polarion-publishers

- job-group:
    name: virt-who-stage-esx-provision-runtest
    jobs:
      - 'virt-who-stage-esx-provision'
      - 'virt-who-stage-esx-runtest'

- project:
    name: virt-who-stage-esx-jobs
    project: virt-who-stage-esx
    project_defaults: entitlement-ci/config/project_defaults
    topology_path: entitlement-ci/config
    topology: bkr_build_single_provision_no_hvm
    ssh_keyfile: entitlement-ci/config/keys/ent-key
    beaker_keyfile: entitlement-ci/config/keys/beaker-key
    tests_path: entitlement-ci/tests
    testparams: echo "I am a test parameter"
    jobs:
      - virt-who-stage-esx-provision-runtest
    jslavename: jslave-virt-who-stage-esx-slave
    jslave_execs: 5
    jslaveimage: rhel-6.8-server-x86_64-released
    jslaveflavor: m1.medium
    jslaveusername: root
    jslavepassword: redhat
    jslaveteardown: True
    jmastername: jslave-static-entitlement-master
